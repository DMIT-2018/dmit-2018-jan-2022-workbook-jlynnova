#nullable disable
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;


#region Additional Namespaces
using ChinookSys.DAL;
using ChinookSys.ViewModels;
using ChinookSys.Entities;
#endregion

namespace ChinookSys.BLL
{
    public class AlbumServices
    {
        #region Constructor and Context Dependency
        private readonly ChinookContext _context;

        //obtan the context link from IServiceCollection when this
        //  set of services is injected into the "outside user"
        internal AlbumServices(ChinookContext context)
        {
            _context = context;
        }
        #endregion

        #region Services : Queries
        public List<AlbumsListBy> AlbumsByGenre(int genreid,
                                            int pageNumber,
                                            int pageSize,
                                            out int totalrows)
        {

            //return raw data, let the presentation decide ordering

            //pagin
            //pageNumber (input), pageSize (input) and totalrows (output)
            //  are used in determining the rows to be return for the page display

            //the query does not alter
            IEnumerable<AlbumsListBy> info = _context.Tracks
                                            .Where(x => x.GenreId == genreid
                                                    && x.AlbumId.HasValue)
                                            .Select(x => new AlbumsListBy
                                            {
                                                AlbumId = (int)x.AlbumId,
                                                Title = x.Album.Title,
                                                ArtistId = x.Album.ArtistId,
                                                ReleaseYear = x.Album.ReleaseYear,
                                                ReleaseLabel = x.Album.ReleaseLabel,
                                                ArtistName = x.Album.Artist.Name
                                            })
                                            .Distinct();
            //obtain the number of total rows generated by the query (collection)
            totalrows = info.Count();

            //calculate the number of rows to skip from the first of the collection
            //  to the actual rows to be returned
            //this calculation is based on the page number and page size
            //page 1: skip 0 rows; page 2: skip page size rows; page 3; skip 2 * page size
            int skipRows = (pageNumber - 1) * pageSize;

            //use the Linq extension .Skip() and .Take() to obtain the desired rows
            //  from the whole query collection
            //return the selected set of collection rows
            return info.Skip(skipRows).Take(pageSize).ToList();
        }
        #endregion
    }
}
